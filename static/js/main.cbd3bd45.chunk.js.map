{"version":3,"sources":["components/Grid/Grid.module.css","components/Loading/Loading.module.css","components/Post/Post.js","components/Grid/Grid.js","components/Loading/Loading.js","utilities.js","hooks/useFetch.js","App.js","constants.js","reportWebVitals.js","index.js","components/Post/Post.module.css"],"names":["module","exports","Post","ref","date","thumb","title","url","className","styles","post","href","target","rel","image","src","duration","ease","lazy","forwardRef","Grid","posts","lastPostElementRef","TransitionGroup","gridContainer","map","index","singlePost","length","CSSTransition","classNames","timeout","appear","enter","Loading","loader","a","fetch","response","json","data","useFetch","useState","loading","setLoading","error","setError","setData","hasMore","setHasMore","useEffect","getData","then","prevData","Set","App","pageNumber","setPageNumber","observer","useRef","useCallback","node","current","disconnect","IntersectionObserver","isIntersecting","prevPageNumber","observe","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cbd3bd45.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gridContainer\":\"Grid_gridContainer__2Xke-\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Loading_loader__25nW6\",\"rotate\":\"Loading_rotate__1G0Eh\",\"ball1\":\"Loading_ball1__7oKSZ\",\"ball2\":\"Loading_ball2__28vjk\"};","import { forwardRef } from 'react';\r\nimport PreloadImage from 'react-preload-image';\r\nimport styles from './Post.module.css';\r\n\r\nconst Post = ({ date, thumb, title, url }, ref) => (\r\n  <article className={styles.post} ref={ref}>\r\n    <a\r\n      href={url}\r\n      className={styles.url}\r\n      target=\"_blank\"\r\n      rel=\"noopener noreferrer\"\r\n    >\r\n      <PreloadImage\r\n        className={styles.image}\r\n        src={thumb}\r\n        duration=\"1s\"\r\n        ease=\"ease 0.5s\"\r\n        lazy\r\n      />\r\n\r\n      <h2 className={styles.title}>{title}</h2>\r\n      <span className={styles.date}>{date}</span>\r\n    </a>\r\n  </article>\r\n);\r\n\r\nexport default forwardRef(Post);\r\n","import styles from './Grid.module.css';\r\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\r\nimport Post from './../Post/Post';\r\n\r\nconst Grid = ({ posts, lastPostElementRef }) => (\r\n  <TransitionGroup className={styles.gridContainer}>\r\n    {posts.map((post, index) => {\r\n      let singlePost =\r\n        posts.length === index + 1 ? (\r\n          <Post ref={lastPostElementRef} key={post.title} {...post} />\r\n        ) : (\r\n          <Post key={post.title} {...post} />\r\n        );\r\n\r\n      return (\r\n        <CSSTransition\r\n          classNames=\"fade\"\r\n          key={post.title}\r\n          timeout={{\r\n            appear: 5000,\r\n            enter: 100,\r\n          }}\r\n        >\r\n          {singlePost}\r\n        </CSSTransition>\r\n      );\r\n    })}\r\n  </TransitionGroup>\r\n);\r\n\r\nexport default Grid;\r\n","import styles from './Loading.module.css';\r\n\r\nconst Loading = () => <div className={styles.loader}></div>;\r\n\r\nexport default Loading;\r\n","export async function getData(url) {\r\n  const response = await fetch(url);\r\n  const data = await response.json();\r\n\r\n  return data;\r\n}\r\n","import { useEffect, useState } from 'react';\r\nimport { getData } from './../utilities';\r\n\r\nexport default function useFetch(url) {\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(false);\r\n  const [data, setData] = useState([]);\r\n  const [hasMore, setHasMore] = useState(true);\r\n\r\n  useEffect(() => {\r\n    setLoading(true);\r\n    setError(false);\r\n\r\n    getData(url).then((data) => {\r\n      setData((prevData) => [...new Set([...prevData, ...data])]);\r\n      setHasMore(data.length > 0);\r\n      setLoading(false);\r\n    });\r\n  }, [url]);\r\n\r\n  return { loading, error, data, hasMore };\r\n}\r\n","import { useState, useRef, useCallback } from 'react';\nimport { API_URL } from './constants';\nimport Grid from './components/Grid/Grid';\nimport Loading from './components/Loading/Loading';\nimport useFetch from './hooks/useFetch';\n\nfunction App() {\n  const [pageNumber, setPageNumber] = useState(1);\n\n  const { loading, error, data, hasMore } = useFetch(\n    `${API_URL}/posts?_page=${pageNumber}`\n  );\n\n  const observer = useRef(null);\n\n  const lastPostElementRef = useCallback(\n    (node) => {\n      if (loading) return;\n      if (observer.current) observer.current.disconnect();\n      observer.current = new IntersectionObserver(([entry]) => {\n        if (entry.isIntersecting && hasMore) {\n          setPageNumber((prevPageNumber) => prevPageNumber + 1);\n        }\n      });\n      if (node) observer.current.observe(node);\n    },\n    [loading, hasMore]\n  );\n\n  return (\n    <section className=\"App\">\n      <h1 className=\"title\">üëÅÔ∏è Recent posts</h1>\n\n      <Grid posts={data} lastPostElementRef={lastPostElementRef} />\n\n      {loading && <Loading />}\n\n      {/* TODO: */}\n      {error && 'Error'}\n    </section>\n  );\n}\n\nexport default App;\n","export const API_URL =\r\n  'https://my-json-server.typicode.com/rawic/react-news-feed';\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"post\":\"Post_post__3BAMZ\",\"image\":\"Post_image__1e2EC\",\"url\":\"Post_url__268Vy\",\"title\":\"Post_title__2qHz1\",\"date\":\"Post_date__1CPM_\"};"],"sourceRoot":""}